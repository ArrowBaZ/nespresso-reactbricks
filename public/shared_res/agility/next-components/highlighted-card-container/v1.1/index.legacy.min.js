const e=e=>e?e.toString().replace(/"/g,"&quot;").replace(/'/g,"&apos;"):"",n=e=>null==e;class t extends HTMLElement{connectedCallback(){this.props=(e=>{const t=(e=>e.find((e=>"data"===e.nodeName)))([...e]),a=[...e].filter((e=>"data"!==e.nodeName)).reduce(((e,n)=>({...e,[n.nodeName]:n.nodeValue})),{});if(n(t))return a;try{return{...a,...JSON.parse(t.nodeValue)}}catch(e){console.log("ERROR: No data",e)}})(this.attributes),this.classes=this.createClasses(),this.render()}createClasses(){const{layout:e}=this.props,{padding_top:n,padding_bottom:t}=e,a="nb-highlighted-card-container";return{base:a,container:[a,n,t].join(" ")}}render(){const{layout:e,campaign:n,cards:t}=this.props,{contrast:a,background_color:r}=e;this.innerHTML=`\n            <nb-container\n                background_color="${r}"\n                campaign_id="${n.id}"\n                campaign_name="${n.name}"\n                campaign_position="${n.position}"\n                campaign_creative="${n.creative}"\n                classname="${this.classes.container}"\n                contrast="${a}"\n                element_class="${this.classes.base}__row"\n            >\n                ${this.renderCards()}\n            </nb-container>\n        `,this.setAttribute("items",t.length)}renderCards(){const{cards:e=[]}=this.props;return e.map(this.renderCard).join("")}renderCard(n){return`<nb-highlighted-card data="${(n=>e(JSON.stringify(n)))(n)}"></nb-highlighted-card>`}}customElements.get("nb-highlighted-card-container")||customElements.define("nb-highlighted-card-container",t);export{t as default};
