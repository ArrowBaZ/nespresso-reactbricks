const e=e=>null==e;class t extends HTMLElement{connectedCallback(){this.props=(t=>{const n=(e=>e.find((e=>"data"===e.nodeName)))([...t]),s=[...t].filter((e=>"data"!==e.nodeName)).reduce(((e,t)=>({...e,[t.nodeName]:t.nodeValue})),{});if(e(n))return s;try{return{...s,...JSON.parse(n.nodeValue)}}catch(e){console.log("ERROR: No data",e)}})(this.attributes),this.render(),this.createEventListeners()}createEventListeners(){this.addEventListener("click",this.handleClick)}render(){const{link:e,label:t,code:n,a11y_label:s="color",selected:a,size:l="large"}=this.props,r=document.createElement(e?"a":"button");e&&r.setAttribute("href",e),t&&(r.setAttribute("title",t),r.setAttribute("aria-label",`${t} ${s}`)),"true"===a&&r.setAttribute("class","selected"),this.classList.add(l),r.innerHTML=`\n            <div><span style="background-color: ${n}"></span></div>\n        `,this.innerHTML=r.outerHTML}handleClick(){const{sku:e}=this.props;(({eventName:e,args:t,element:n})=>{let s;n=n||window,t?s=new CustomEvent(e,{detail:t,bubbles:!0}):"function"==typeof Event?s=new Event(e):(s=document.createEvent("Event"),s.initEvent(e,!0,!0)),n.dispatchEvent(s)})({element:this,eventName:"EVENT_COLOR_CLICKED",args:{sku:e}})}}customElements.get("nb-color")||customElements.define("nb-color",t);export{t as default};
