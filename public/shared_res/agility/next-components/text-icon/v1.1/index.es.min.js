const t=t=>null==t;class n extends HTMLElement{constructor(){super(),this.slot=this.innerHTML}connectedCallback(){this.props=(n=>{const e=(t=>t.find((t=>"data"===t.nodeName)))([...n]),s=[...n].filter((t=>"data"!==t.nodeName)).reduce(((t,n)=>({...t,[n.nodeName]:n.nodeValue})),{});if(t(e))return s;try{return{...s,...JSON.parse(e.nodeValue)}}catch(t){console.log("ERROR: No data",t)}})(this.attributes),this.classes=this.createClasses(),this.render()}createClasses(){const{size:t="small",color:n="white",icon_right:e="",icon_left:s=""}=this.props,i="textIcon",o=e||s;return s&&this.setAttribute("icon_left",s),e&&this.setAttribute("icon_right",e),{link:[i,`${i}--${t}`,`${i}--${n}`,`${o&&`${i}--icon`}`].join(" ")}}render(){const{size:t="small",icon_right:n="",icon_left:e=""}=this.props,s=this.slot;this.innerHTML=`\n        <span\n            class="${this.classes.link}"\n            ${"plpCategory"===t?`phantom="${s}"`:""}\n        >\n            ${e&&`<nb-icon icon='${e}'></nb-icon>`}\n            <span class="textIcon__label">${s}</span>\n            ${n&&`<nb-icon icon='${n}'></nb-icon>`}\n        </span>`}}customElements.get("nb-text-icon")||customElements.define("nb-text-icon",n);export{n as default};
