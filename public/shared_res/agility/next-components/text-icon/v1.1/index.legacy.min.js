this.index=this.index||{},this.index.legacy=this.index.legacy||{},this.index.legacy.min=this.index.legacy.min||{},this.index.legacy.min.js=function(){const n=n=>null==n;class t extends HTMLElement{constructor(){super(),this.slot=this.innerHTML}connectedCallback(){this.props=(t=>{const e=(n=>n.find((n=>"data"===n.nodeName)))([...t]),s=[...t].filter((n=>"data"!==n.nodeName)).reduce(((n,t)=>({...n,[t.nodeName]:t.nodeValue})),{});if(n(e))return s;try{return{...s,...JSON.parse(e.nodeValue)}}catch(n){console.log("ERROR: No data",n)}})(this.attributes),this.classes=this.createClasses(),this.render()}createClasses(){const{size:n="small",color:t="white",icon_right:e="",icon_left:s=""}=this.props,i="textIcon",c=e||s;return s&&this.setAttribute("icon_left",s),e&&this.setAttribute("icon_right",e),{link:[i,`${i}--${n}`,`${i}--${t}`,`${c&&`${i}--icon`}`].join(" ")}}render(){const{size:n="small",icon_right:t="",icon_left:e=""}=this.props,s=this.slot;this.innerHTML=`\n        <span\n            class="${this.classes.link}"\n            ${"plpCategory"===n?`phantom="${s}"`:""}\n        >\n            ${e&&`<nb-icon icon='${e}'></nb-icon>`}\n            <span class="textIcon__label">${s}</span>\n            ${t&&`<nb-icon icon='${t}'></nb-icon>`}\n        </span>`}}return customElements.get("nb-text-icon")||customElements.define("nb-text-icon",t),t}();
