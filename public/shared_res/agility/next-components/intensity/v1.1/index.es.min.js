const n=n=>null==n;class e extends HTMLElement{constructor(){super(),this.props={}}connectedCallback(){this.props=(e=>{const t=(n=>n.find((n=>"data"===n.nodeName)))([...e]),s=[...e].filter((n=>"data"!==n.nodeName)).reduce(((n,e)=>({...n,[e.nodeName]:e.nodeValue})),{});if(n(t))return s;try{return{...s,...JSON.parse(t.nodeValue)}}catch(n){console.log("ERROR: No data",n)}})(this.attributes),this.render()}render(){const{intensity_label:n="Intensity",a11y_intensity_max:e,max_intensity:t}=this.props,s=parseInt(this.props.intensity);if(!s||isNaN(s))return"";const i=e.replace("{max_intensity}",t);this.innerHTML=`\n            <div aria-label="${n} ${s} ${i}">\n                ${n}${this.renderIntensityMin(s)}\n                ${s}\n                ${this.renderIntensityMax(s)}\n            </div>\n        `}renderIntensityMin(n){return new Array(Math.max(n,0)-0).fill('<span class="bar filled"></span>').join("")}renderIntensityMax(n){let{max_intensity:e}=this.props;return e&&"undefined"!==e||(e=14),new Array(parseInt(e)-Math.min(n,parseInt(e))).fill('<span class="bar"></span>').join("")}}customElements.get("nb-intensity")||customElements.define("nb-intensity",e);export{e as default};
