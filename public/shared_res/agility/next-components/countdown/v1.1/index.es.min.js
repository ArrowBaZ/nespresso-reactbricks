const e=e=>null==e;class t extends HTMLElement{constructor(){super(),this.props={},this.intervalM=null}connectedCallback(){this.props=(t=>{const n=(e=>e.find((e=>"data"===e.nodeName)))([...t]),r=[...t].filter((e=>"data"!==e.nodeName)).reduce(((e,t)=>({...e,[t.nodeName]:t.nodeValue})),{});if(e(n))return r;try{return{...r,...JSON.parse(n.nodeValue)}}catch(e){console.log("ERROR: No data",e)}})(this.attributes),this.render()}render(){const{date:e,time:t="00:00:00",locale:n={}}=this.props;if(!e)return;const r="string"==typeof n?JSON.parse(n):n;this.intervalM=this.convertDateTime(e,t,r)}renderTime(e,t){return`${e}${t}`}convertDateTime(e,t,n){const r=new Date(`${e} ${t}`).getTime();if(this.checkDifference(r)<=0)return this.setEndAttribute(),"";const s=setInterval((()=>{const e=this.checkDifference(r),t=Math.floor(e/864e5),i=Math.floor(e%864e5/36e5),o=Math.floor(e%36e5/6e4),a=Math.floor(e%6e4/1e3);let c=`<strong>${this.renderTime(t,n.days)}  ${this.renderTime(i,n.hours)} ${this.renderTime(o,n.minutes)} ${this.renderTime(a,n.seconds)}</strong>`;this.innerHTML=c,e<=0&&(clearInterval(s),this.innerHTML="",this.setEndAttribute())}),1e3);return s}setEndAttribute(){this.setAttribute("countdown-end","true")}checkDifference(e){return e-(new Date).getTime()}disconnectedCallback(){this.intervalM&&clearInterval(this.intervalM)}}customElements.get("nb-countdown")||customElements.define("nb-countdown",t);export{t as default};
