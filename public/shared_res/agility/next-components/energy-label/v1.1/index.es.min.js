const e=e=>null==e;class l extends HTMLElement{constructor(){super(),this.props={},this.level="",this.levelPlus=""}connectedCallback(){this.props=(l=>{const s=(e=>e.find((e=>"data"===e.nodeName)))([...l]),t=[...l].filter((e=>"data"!==e.nodeName)).reduce(((e,l)=>({...e,[l.nodeName]:l.nodeValue})),{});if(e(s))return t;try{return{...t,...JSON.parse(s.nodeValue)}}catch(e){console.log("ERROR: No data",e)}})(this.attributes),this.render()}render(){const{a11y_label:e,level:l}=this.props;if(""===e||""===l)return"";switch(this.classList.add(`level_${l}`),l){case"g":this.level="G";break;case"f":this.level="F";break;case"e":this.level="E";break;case"d":this.level="D";break;case"c":this.level="C";break;case"b":this.level="B";break;case"a4":this.level="A";break;case"a3":this.level="A",this.levelPlus="+";break;case"a2":this.level="A",this.levelPlus="++";break;default:this.level="A",this.levelPlus="+++"}this.innerHTML=`\n            <mark aria-label='${e} ${this.level}${this.levelPlus}'>\n                ${this.level}\n                ${""!==this.levelPlus?`<sup>${this.levelPlus}</sup>`:""}\n            </mark>\n        `}}customElements.get("nb-energy-label")||customElements.define("nb-energy-label",l);export{l as default};
