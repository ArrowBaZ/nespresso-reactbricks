const e=e=>null==e,t=(e,t)=>{const{ref:i}=t.dataset,s=i.match(/(\w+)\[(.+)\]/);return null!==s?n(e,t,s):{...e,[t.dataset.ref]:t}},n=(e,t,[,n,i])=>(void 0===e[n]&&(e[n]=[]),e[n][i]=t,e);class i extends HTMLElement{constructor(){super()}connectedCallback(){this.props=(t=>{const n=(e=>e.find((e=>"data"===e.nodeName)))([...t]),i=[...t].filter((e=>"data"!==e.nodeName)).reduce(((e,t)=>({...e,[t.nodeName]:t.nodeValue})),{});if(e(n))return i;try{return{...i,...JSON.parse(n.nodeValue)}}catch(e){console.log("ERROR: No data",e)}})(this.attributes),this.render(),this.refs=[...this.querySelectorAll("[data-ref]")].reduce(t,{}),this.bindEvent(),this.setCollapseMaxHeight()}render(){this.classList.add("nb-collapse"),this.innerHTML=`\n            ${this.renderToggle()}\n            ${this.renderPanel()}\n        `,this.button=this.querySelector("button"),this.panel=this.querySelector(".panel"),this.expanded=!1}renderToggle(){const{heading:e="",is_heading:t="false",heading_level:n="3",fancy:i="false",id:s="0"}=this.props;return`\n            <button\n                class="${"true"===i?"t-sm-500-caps":"t-sm-500"}"\n                data-ref="toggle"\n                ${"true"===t&&`role="heading" aria-level="${n}"`}\n                aria-expanded="false"\n                id="collapse-heading-${s}"\n                aria-controls="collapse-region-${s}">\n                ${this.renderToggleIcon()}\n                <span>${e}</span>\n                <nb-icon\n                    icon="chevron-down"\n                    class="chevron"\n                ></nb-icon>\n            </button>\n        `}renderToggleIcon(){const{icon:e=""}=this.props;return e&&`<nb-icon icon="${e}" class="icon"></nb-icon>`}renderPanel(){const{text:e="",id:t="0"}=this.props;return`\n            <div\n                data-ref="panel"\n                class="panel"\n                aria-hidden="true"\n                role="region"\n                aria-labelledby="collapse-heading-${t}"\n                id="collapse-region-${t}">\n                <div class="wysiwyg t-sm-400">\n                    ${e}\n                </div>\n            </div>\n        `}handleToggleClick(){this.emit(),this.toggle()}toggle(){this.expanded=!this.expanded,this.button.setAttribute("aria-expanded",this.expanded),this.panel.setAttribute("aria-hidden",!this.expanded),this.updatePanelHeight()}close(){this.expanded=!1,this.button.setAttribute("aria-expanded",!1),this.panel.setAttribute("aria-hidden",!0),this.updatePanelHeight()}updatePanelHeight(){const{panel:e}=this.refs;e.style.maxHeight=this.expanded?`${e.scrollHeight}px`:0}setCollapseMaxHeight(){const{panel:e}=this.refs;this.style.maxHeight=`${this.button.clientHeight+e.scrollHeight}px`}bindEvent(){this.boundHandleClick=this.handleToggleClick.bind(this),this.button.addEventListener("click",this.boundHandleClick)}unbindEvent(){this.button.removeEventListener("click",this.boundHandleClick)}emit(){const{nested:e="false",id:t}=this.props;"true"===e&&void 0!==t&&(({eventName:e,args:t,element:n})=>{let i;n=n||window,t?i=new CustomEvent(e,{detail:t,bubbles:!0}):"function"==typeof Event?i=new Event(e):(i=document.createEvent("Event"),i.initEvent(e,!0,!0)),n.dispatchEvent(i)})({eventName:"EVENT_COLLAPSE_TOGGLE",args:{id:t},element:this.parentElement})}disconnectedCallback(){this.unbindEvent()}}customElements.get("nb-collapse")||customElements.define("nb-collapse",i);export{i as default};
