const e=window.memoPromiseCache?window.memoPromiseCache:{};class t{constructor(e){this.getPromise=e,this.request=this.request.bind(this)}request({uniqueKey:t,url:s}){if(!t)return Promise.reject(new Error("Unique key not passed"));if(!e[t]){const r=this.getPromise(s);e[t]=r.then((e=>e.text())).catch((s=>{throw delete e[t],s}))}return e[t]}}const s=e=>null==e;class r extends HTMLElement{constructor(){super(),this.props={},this.path="",this.source=""}connectedCallback(){this.props=(e=>{const t=(e=>e.find((e=>"data"===e.nodeName)))([...e]),r=[...e].filter((e=>"data"!==e.nodeName)).reduce(((e,t)=>({...e,[t.nodeName]:t.nodeValue})),{});if(s(t))return r;try{return{...r,...JSON.parse(t.nodeValue)}}catch(e){console.log("ERROR: No data",e)}})(this.attributes),this.classList.add("lazy-load"),this.classList.add("nb-svg"),this.beforeRender(),this.render()}beforeRender(){}render(){if(""===this.source)return void console.error(`Error: Component SVG - render - 'source' property is not set:${this.source}`);this.innerHTML="<svg></svg>",this.afterHtmlRender();const e=this;!function(e,t){if(/Trident\/|MSIE/.test(window.navigator.userAgent)||(s=window.navigator.userAgent,r=s.indexOf("OS "),(s.indexOf("iPhone")>-1||s.indexOf("iPad")>-1)&&r>-1&&window.Number(s.substr(r+3,3).replace("_","."))<14))t();else if("IntersectionObserver"in window){let s=new IntersectionObserver((function(e){e.forEach((function(e){e.isIntersecting&&(t(),s.unobserve(e.target))}))}),{above:[0],rootMargin:"150% 0px"});s.observe(e)}var s,r}(e,(()=>{e.fetchSVG(this.source,`${this.path}${this.source}.svg`)}))}afterHtmlRender(){}request(e){return fetch(e)}async fetchSVG(e,s){const r=this.firstElementChild,n=new t(this.request),{request:i}=n;let o=await i({uniqueKey:e,url:s});let a=(new DOMParser).parseFromString(o,"image/svg+xml").getElementsByTagName("svg");if(!a.length)return console.error(`Error: Component SVG - fetchSVG - SVG not found ${a}`),this.classList.remove("lazy-load"),void this.classList.add("lazy-loaded-error");this.classList.remove("lazy-load"),this.classList.add("lazy-loaded"),a=a[0];const d=a.attributes,l=d.length;for(let e=0;e<l;++e)if(d[e].specified)if("class"===d[e].name){const t=d[e].value.replace(/\s+/g," ").trim().split(" "),s=t.length;for(let e=0;e<s;++e)r.classList.add(t[e])}else r.setAttribute(d[e].name,d[e].value);for(;a.childNodes.length;)r.appendChild(a.childNodes[0])}}customElements.get("nb-svg")||customElements.define("nb-svg",r);export{r as default};
