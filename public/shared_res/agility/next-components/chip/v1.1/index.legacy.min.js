const e=e=>null==e;class t extends HTMLElement{constructor(){super(),this.slot=this.innerHTML,this.checkbox=null}static get observedAttributes(){return["disabled","checked"]}connectedCallback(){this.props=(t=>{const n=(e=>e.find((e=>"data"===e.nodeName)))([...t]),c=[...t].filter((e=>"data"!==e.nodeName)).reduce(((e,t)=>({...e,[t.nodeName]:t.nodeValue})),{});if(e(n))return c;try{return{...c,...JSON.parse(n.nodeValue)}}catch(e){console.log("ERROR: No data",e)}})(this.attributes),this.render()}render(){const{content:e,icon:t="",color:n="",background_image:c="",filter_label_AA:i="filter",rounded:s="true",checked:l="false",disabled:a="false"}=this.props,r=this.slot?this.slot:e;const o="true"===l?"checked":"",d="true"===a?"disabled":"";this.innerHTML=`\n            <input type='checkbox' name='options' aria-label="${r+" "+i}" ${o} ${d}>\n            <label style=''>\n                ${t&&`<nb-icon icon='${t}'></nb-icon>\n                `}\n                ${n&&`<div class='chip-color' style='background:${n}'></div>\n                `}\n                ${c&&`<div class='chip-image ${"true"===s?"rounded":""}' style='background-image:url("${c}")'></div>\n                `}\n                <span aria-hidden="true" phantom="${r}">${r}</span>\n            </label>\n        `,this.querySelector("label").addEventListener("click",(e=>{e.preventDefault(),this.querySelector("input").click()})),this.checkbox=this.getElementsByTagName("input")[0]}attributeChangedCallback(e,t,n){this.checkbox&&("disabled"===e?this.checkbox.disabled="true"===n:"checked"===e&&(this.checkbox.checked="true"===n))}disconnectedCallback(){this.querySelector("label").removeEventListener("click",(e=>{e.preventDefault(),this.querySelector("input").click()}))}}customElements.get("nb-chip")||customElements.define("nb-chip",t);export{t as default};
