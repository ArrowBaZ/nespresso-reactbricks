const s=s=>null==s;class e extends HTMLElement{constructor(){super()}connectedCallback(){this.props=(e=>{const t=(s=>s.find((s=>"data"===s.nodeName)))([...e]),n=[...e].filter((s=>"data"!==s.nodeName)).reduce(((s,e)=>({...s,[e.nodeName]:e.nodeValue})),{});if(s(t))return n;try{return{...n,...JSON.parse(t.nodeValue)}}catch(s){console.log("ERROR: No data",s)}})(this.attributes),this.classes=this.createClasses(),this.render()}createClasses(){const s="nb-list";return{base:s,heading:"nb-list__heading t-xs-700-caps",items:"nb-list__items",item:{base:"nb-list__item",single:"nb-list__item--single",icon:"nb-list__item-icon",label:"nb-list__item-label t-2xs-500"}}}render(){const{heading:s=""}=this.props;this.innerHTML=`\n            <div class="${this.classes.base}">\n                <div class="${this.classes.heading}">${s}</div>\n                ${this.renderItems()}\n            </div>\n        `}renderItems(){const{items:s=[]}=this.props,e=1===s.length;if(e){const t=s.find(Boolean);return this.renderItem(t,e)}const t=s.reduce(((s,e)=>`${s}${this.renderItem(e)}`),"");return`<div class="${this.classes.items}">${t}</div>`}renderItem({icon:s,label:e,size:t},n=!1){const i=n?this.classes.item.single:"";return`\n            <div class="${this.classes.item.base} ${i}">\n                <div class="${this.classes.item.icon}">\n                    <nb-icon icon="${s}"></nb-icon>\n                </div>\n                <div class="${this.classes.item.label}">\n                    ${e}\n                    ${t?`<br>${t}`:""}\n                </div>\n            </div>\n        `}}customElements.get("nb-list")||customElements.define("nb-list",e);export{e as default};
