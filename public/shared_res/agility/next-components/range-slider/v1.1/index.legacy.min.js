const e=e=>{const a=(e=>e.find((e=>"data"===e.nodeName)))([...e]),l=[...e].filter((e=>"data"!==e.nodeName)).reduce(((e,t)=>({...e,[t.nodeName]:t.nodeValue})),{});if(t(a))return l;try{return{...l,...JSON.parse(a.nodeValue)}}catch(e){console.log("ERROR: No data",e)}},t=e=>null==e;class a extends HTMLElement{constructor(){super()}static get observedAttributes(){return["min_value","min_value_label","max_value","max_value_label"]}connectedCallback(){this.render()}render(){this.props=e(this.attributes);const{min_value:t,min_value_label:a,max_value:l,max_value_label:s,min:n,max:i,min_label:r,max_label:u,step:m,label:d}=this.props;this.minSliderId=`slider-${n}-${m}`,this.maxSliderId=`slider-${i}-${m}`,this.innerHTML=`\n            <div class='label t-xs-500-sl'>\n                ${d}\n                <label for='${this.minSliderId}' class="valueLabel t-xs-700-sl">${a}</label>\n                <span class='valueLabel class="t-xs-700-sl"'> - </span>\n                <label for='${this.maxSliderId}' class="valueLabel t-xs-700-sl">${s}</label>\n            </div>\n            <div class="slider" role="group" style="--a: ${t}; --b: ${l}; --min: ${n}; --max: ${i}">\n                <input type="range" step="${m}"\n                    min="${n}" max="${i}" id='${this.minSliderId}'\n                    aria-label="temp-aria-label" value="${t}">\n                <input type="range" step="${m}"\n                    min="${n}" max="${i}" id='${this.maxSliderId}'\n                    aria-label="temp-aria-label" value="${l}">\n            </div>\n            <div class='rangeLabel minRangeLabel t-xs-500-sl'>${r}</div>\n            <div class='rangeLabel maxRangeLabel t-xs-500-sl'>${u}</div>\n        `,this.minInput=document.getElementById(this.minSliderId),this.maxInput=document.getElementById(this.maxSliderId),this.boundOnInput=this.onInput.bind(this),addEventListener("input",this.boundOnInput,!1)}mutualClamp(e,t){return"a"===e?Math.min(this.maxInput.value,t):Math.max(this.minInput.value,t)}onInput({target:e}){let t;e.id===this.minSliderId?t="a":e.id===this.maxSliderId&&(t="b");const a=this.mutualClamp(t,e.value);e.parentNode.style.setProperty(`--${t}`,a),e.value=a,this.setProps(),"false"!==this.props.update_value_label&&this.updateLabels(),this.onValueChange(t,a)}updateLabels(){this.setAttribute("min_value_label",this.props.min_value),this.props.min_value_label=this.props.min_value,this.setAttribute("max_value_label",this.props.max_value),this.props.max_value_label=this.props.max_value,this.renderLabels()}setProps(){this.settingValue=!0,this.setAttribute("min_value",this.minInput.value),this.setAttribute("max_value",this.maxInput.value),this.props=e(this.attributes),this.settingValue=!1}onValueChange(e,t){(({eventName:e,args:t,element:a})=>{let l;a=a||window,t?l=new CustomEvent(e,{detail:t,bubbles:!0}):"function"==typeof Event?l=new Event(e):(l=document.createEvent("Event"),l.initEvent(e,!0,!0)),a.dispatchEvent(l)})({eventName:"onValueChange",args:{["a"===e?"min_value":"max_value"]:t},element:this})}attributeChangedCallback(t){!this.settingValue&&this.minInput&&("min_value_label"!==t&&"max_value_label"!==t||""===this.innerHTML||(this.props=e(this.attributes),this.renderLabels()))}renderLabels(){const e=this.querySelector(`label[for="${this.minSliderId}"]`);e&&(e.textContent=this.props.min_value_label);const t=this.querySelector(`label[for="${this.maxSliderId}"]`);t&&(t.textContent=this.props.max_value_label)}}customElements.get("nb-range-slider")||customElements.define("nb-range-slider",a);export{a as default};
