{"version":3,"sources":["webpack://web-components-es6-loader/./src/tracking.ts","webpack://web-components-es6-loader/./src/casper.ts"],"names":["eventModel","event","eventRaisedBy","eventCategory","eventAction","eventLabel","nonInteraction","translateComponentName","componentName","trackCasperXP","window","asyncRules","createCasperExperience","resolve","undefined","isRunningPreview","Error","firstVariationId","component","variation","getFirstPersoVariationId","instanciateExperience","projectId","order","personalisation","hasAsync","hasAsyncTargetingRules","experience","rule","functionBody","Function","createRule","data","displayNewVariation","variationId","trackCasperMatch","onCasperMatch","hasSpecificRule","hasMismatchTargetingRule","project","componentId","findComponentData","e","console","setTimeout","onCasperMismatch","hasDefaultVariation"],"mappings":"8eAEA,IAAMA,EAAgC,CACpCC,MADoC,cAEpCC,cAFoC,gBAGpCC,cAHoC,+BAIpCC,YAJoC,yBAKpCC,WALoC,mBAMpCC,eAAgB,GAGlB,SAASC,EAAuBC,GAC9B,OAAOA,8CAAP,KAGK,SAASC,EAAcD,GAC5BE,qBAAuBA,sBAAvBA,GACA,IAAMT,EAA2B,EAAH,GAA9B,GACAA,aAAmBM,EAAnBN,GACAS,6BCbF,IAAMC,EAAa,CAAC,iBAAkB,gBAAtC,SAKO,SAASC,EAAuB,EAAhC,OAML,QADM,IADNC,WAAmEC,IAE9DJ,OAAD,iBAA2BK,IAC7B,MAAM,IAAIC,MAAV,sDAEF,IAAMC,EAwJR,SAAkCC,GAChC,OAAOA,EAAA,sBAA+B,0BAAeC,qBAzJ5BC,CAAzB,IACIH,MAA2BF,KAC7BM,EAAsBC,EAAWJ,EAAWD,EAAkBM,EAA9DF,GAiBJ,SAASA,EAAsB,EAA/B,SAOE,QADA,IADAR,WAAmEC,GAE9DJ,OAAL,gBAGA,IAAMc,EAAmCN,gBAAzC,gBAEMO,EAAWC,EAAjB,GACMC,EAA6B,IAAIjB,sBAAJ,WAAqCc,EAAxE,MACAA,iBAA8B,SAAUI,GACtC,IAAMC,EAAe,cAAgBD,EAAhB,SAAkCA,EAAlC,UAArB,IAOmB,IAAIE,SAAS,aAAhC,EACAC,OAEFJ,kBAA0B,SAAUK,IA6CtC,SAAuB,EAAvB,cAMQ,IADNnB,WAAmEC,IAEnEmB,QAAoBX,EAAWJ,EAAWgB,EAAaX,EAAvDU,GD9FK,SAA0BzB,GAC/BE,qBAAuBA,sBAAvBA,GACA,IAAMT,EAA2B,EAAH,GAA9B,GACAA,aAAmBM,EAAnBN,GACAA,6CACAS,6BC0FAyB,CAAiBjB,EAAjBiB,QApDEC,CAAcd,EAAWJ,EAAWgB,EAAaX,EAAjDa,GACAJ,mBAOFL,qBAA6B,SAAUK,IAmBzC,SAAkCd,GAChC,OAAOmB,EAAgBnB,GAAW,iCAAgBU,WAnB3CU,CAAL,KAmDJ,SAA0B,EAA1B,SAOE,WADM,IADNzB,WAAmEC,GAGnE,IACEI,EAwBJ,SAA2BI,EAA3B,GACE,IAAKZ,OAAD,MAAgBA,WAApB,SACE,MAAM,IAAIM,MAAV,oDAEF,IAAMuB,EAAU7B,OAAA,mBAAyB,mBAAa6B,OAAb,KACzC,MAAc,MAAM,IAAIvB,MAAM,+CAAhB,GACd,IAAME,EAAYqB,EAAA,iBAAwB,mBAAerB,SAAf,KAC1C,MACE,MAAM,IAAIF,MACR,iDAAmDwB,EAAc,eADnE,GAGF,SAnCcC,CAAkBnB,EAA9BJ,GACA,MAAOwB,GAEP,YADAC,eAIAzB,oBAA8BgB,EAA9BhB,GADF,OAEEA,aAAqBgB,EAArBhB,mBAEA0B,YAAW,WACT,IACEvB,EAAsBC,EAAWJ,EAAWgB,EAAvB,IAArBb,GACA,MAAOqB,GACPC,kBAJJC,GAOK,OAAI1B,kCACTe,QAAoBX,EAAWJ,EAAW,EAAGK,EAA7CU,GA5EEY,CAAiBvB,EAAWJ,EAAZ,SAAhB2B,GACA,GAAeb,oBAInBL,cAQF,SAASD,EAAuBR,GAC9B,OAAOmB,EAAgBnB,GAAW,uBAAgBP,UAAmBiB,EAAnBjB,SAOpD,SAAS0B,EAAgBnB,EAAzB,GACE,OAAOA,EAAA,iBAA0B,YAC/B,aAAIC,mBACKA,6BAAP,MAoFC,SAAS2B,EAAoB5B,GAClC,OAAOQ,MAAqCX,IAG9C,SAASA,IACP,WAAOL","file":"casper.js","sourcesContent":["import { GTMDataObjectItem } from './types'\n\nconst eventModel: GTMDataObjectItem = {\n  event: 'customEvent',\n  eventRaisedBy: 'Web component',\n  eventCategory: 'GTM Global Campaign Tracking',\n  eventAction: 'Personalized Component',\n  eventLabel: '[component-name]',\n  nonInteraction: 1,\n}\n\nfunction translateComponentName(componentName: string) {\n  return componentName.replace(/^n-/, 'pb_component_').replace(/-/g, '_')\n}\n\nexport function trackCasperXP(componentName: string): void {\n  window.gtmDataObject = window.gtmDataObject || []\n  const event: GTMDataObjectItem = { ...eventModel }\n  event.eventLabel = translateComponentName(componentName)\n  window.gtmDataObject.push(event)\n}\n\nexport function trackCasperMatch(componentName: string): void {\n  window.gtmDataObject = window.gtmDataObject || []\n  const event: GTMDataObjectItem = { ...eventModel }\n  event.eventLabel = translateComponentName(componentName)\n  event.eventAction = 'Personalized Component Match'\n  window.gtmDataObject.push(event)\n}\n","import { Component, ExperienceType, Personalization } from './types'\nimport { displayNewVariation } from './loader'\nimport { Rule } from './types'\nimport { trackCasperMatch } from './tracking'\nexport { trackCasperXP } from './tracking'\n\nconst asyncRules = ['basketContains', 'basketTotalIs', 'since']\n\n/**\n * creates the casper Experience\n */\nexport function createCasperExperience(\n  projectId: string,\n  component: Component,\n  order: number,\n  resolve: ((value: void | PromiseLike<void>) => void) | undefined = undefined\n): void {\n  if (!window.casperEventHub && !isRunningPreview()) {\n    throw new Error(\"Error Casper Generator - can't find casperEventHub\")\n  }\n  const firstVariationId = getFirstPersoVariationId(component)\n  if (firstVariationId != -1 && !isRunningPreview()) {\n    instanciateExperience(projectId, component, firstVariationId, order, resolve)\n  }\n}\n\n/**\n * returns true when the given variation has personalization\n */\n/*function hasPersonalization(variation: Variation): boolean {\n  return (\n    typeof variation.personalisation !== 'undefined' &&\n    variation.personalisation !== null\n  )\n}*/\n\n/**\n * Instanciates the casper Experience\n */\nfunction instanciateExperience(\n  projectId: string,\n  component: Component,\n  variationId: number,\n  order: number,\n  resolve: ((value: void | PromiseLike<void>) => void) | undefined = undefined\n) {\n  if (!window.casperEventHub) {\n    return\n  }\n  const personalisation: Personalization = component.variations[variationId]\n    .personalisation as Personalization\n  const hasAsync = hasAsyncTargetingRules(component)\n  const experience: ExperienceType = new window.casperEventHub.Experience(personalisation.name)\n  personalisation.rules.forEach(function (rule) {\n    const functionBody = 'experience.' + rule.type + '(' + rule.condition + ')'\n    /**\n     * disabling this rule in this case because it's the right way here :\n     * casper targeting rule arguments are complex and we can't come up\n     * with a proper way of parsing them without this eval like method\n     */\n    // eslint-disable-next-line @typescript-eslint/no-implied-eval\n    const createRule = new Function('experience', functionBody)\n    createRule(experience)\n  })\n  experience.executeOnMatch(function (data) {\n    onCasperMatch(projectId, component, variationId, order, resolve)\n    data.unsubscribe()\n  })\n  /*\n  this condition prevents the async experiences of type ABC+ to run properly\n  commenting for now I got to test/deep dive in the procedure to confirm\n  if (!hasAsync) {\n  */\n  experience.executeOnMismatch(function (data) {\n    if (!hasMismatchTargetingRule(component)) {\n      onCasperMismatch(projectId, component.uuid, variationId, order, resolve)\n      if (!hasAsync) data.unsubscribe()\n    }\n  })\n  //}\n  experience.evaluate()\n}\n\n/**\n *  Returns true if any personalization except the standard varation's one\n *  has async targeting rules because in this case , the standard variant\n *  should be rendered at pageload without waiting for any Casper XP match\n */\nfunction hasAsyncTargetingRules(component: Component) {\n  return hasSpecificRule(component, (rule: Rule) => asyncRules.indexOf(rule.type) !== -1)\n}\n\nfunction hasMismatchTargetingRule(component: Component) {\n  return hasSpecificRule(component, (rule: Rule) => rule.type === 'mismatches')\n}\n\nfunction hasSpecificRule(component: Component, comparison: (rule: Rule) => boolean) {\n  return component.variations.some((variation) => {\n    if (variation.personalisation != null) {\n      return variation.personalisation.rules.some(comparison)\n    } else {\n      return false\n    }\n  })\n}\n\n/**\n * continue component initialization when a Casper XP matches\n */\nfunction onCasperMatch(\n  projectId: string,\n  component: Component,\n  variationId: number,\n  order: number,\n  resolve: ((value: void | PromiseLike<void>) => void) | undefined = undefined\n): void {\n  displayNewVariation(projectId, component, variationId, order, resolve)\n  trackCasperMatch(component.module)\n}\n\n/**\n * Continues the component's first variant (standard) initialization\n * or generates the next variant's casper XP when a previous\n * Casper XP mismatches\n */\nfunction onCasperMismatch(\n  projectId: string,\n  componentId: string,\n  variationId: number,\n  order: number,\n  resolve: ((value: void | PromiseLike<void>) => void) | undefined = undefined\n): void {\n  let component: Component\n  try {\n    component = findComponentData(projectId, componentId)\n  } catch (e) {\n    console.log(e)\n    return\n  }\n  if (\n    component.variations.length > variationId + 1 &&\n    component.variations[variationId + 1].personalisation !== null\n  ) {\n    setTimeout(function () {\n      try {\n        instanciateExperience(projectId, component, variationId + 1, order, resolve)\n      } catch (e) {\n        console.log(e)\n      }\n    }, 0)\n  } else if (component.variations[0].personalisation === null) {\n    displayNewVariation(projectId, component, 0, order, resolve)\n  }\n}\n\n/**\n * Retrieves component data from nwc.projects\n */\nfunction findComponentData(projectId: string, componentId: string): Component {\n  if (!window.nwc || !window.nwc.projects) {\n    throw new Error(\"Error Casper Generator - can't find nwc.projects\")\n  }\n  const project = window.nwc.projects.find((project) => project.id === projectId)\n  if (!project) throw new Error(\"Error Casper Generator - can't find project \" + projectId)\n  const component = project.components.find((component) => component.uuid === componentId)\n  if (!component)\n    throw new Error(\n      \"Error Casper Generator - can't find component \" + componentId + ' in project ' + projectId\n    )\n  return component\n}\n\nfunction getFirstPersoVariationId(component: Component) {\n  return component.variations.findIndex((variation) => variation.personalisation !== null)\n}\n\n/**\n * returns true if the component's default variation [0] should be\n * displayed without waiting for the experience to evaluate\n * Cases where it is true :\n *  -the experience contains event based targeting rules\n *  -the loader runs inside Page Builder's preview\n */\nexport function hasDefaultVariation(component: Component): boolean {\n  return hasAsyncTargetingRules(component) || isRunningPreview()\n}\n\nfunction isRunningPreview() {\n  return window.location.pathname.indexOf('/iframe.html') !== -1\n}\n"],"sourceRoot":""}